spring.application.name=demo

spring.datasource.url=jdbc:postgresql://localhost:5432/xresourcedemo
spring.datasource.username=admin
spring.datasource.password=Full@ccess123
spring.datasource.driver-class-name=org.postgresql.Driver

spring.datasource.hikari.maximum-pool-size: 10
spring.datasource.hikari.minimum-idle: 5

spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true

spring.sql.init.mode=never

server.port=8080

jwt.secret=n3gX/h9P0JP8wocS4GvphKjTVHoreGd78FAizMC0wnc=
jwt.expirationMs=86400000


xresource.scan.base-package=org.xresource.demo.repository
xresource.logging.level=TRACE
xresource.openapi.enabled=true
xresource.api.response.error.context=true

logging.level.org.xresource.core=TRACE 

# Enable OpenAPI authentication support
 xresource.openapi.auth.enabled=true
 #
 # # Define a JWT security scheme
  xresource.openapi.auth.security-schemes.jwt.type=http
  xresource.openapi.auth.security-schemes.jwt.scheme=bearer
  xresource.openapi.auth.security-schemes.jwt.bearer-format=JWT
 #
 # # Define an OAuth2 security scheme with authorization code flow
 # xresource.openapi.auth.security-schemes.oauth2.type=oauth2
 # xresource.openapi.auth.security-schemes.oauth2.flows.authorizationCode.authorization-url=https://auth.example.com/oauth/authorize
 # xresource.openapi.auth.security-schemes.oauth2.flows.authorizationCode.token-url=https://auth.example.com/oauth/token
 # xresource.openapi.auth.security-schemes.oauth2.flows.authorizationCode.scopes.read=Grants read access
 # xresource.openapi.auth.security-schemes.oauth2.flows.authorizationCode.scopes.write=Grants write access
 #
 # # Associate resources with specific schemes
 # xresource.openapi.auth.resource-security.user=jwt
 # xresource.openapi.auth.resource-security.admin=oauth2
