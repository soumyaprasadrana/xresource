package org.xresource.core.annotations;

import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

/**
 * Marks a field as read-only within the XResource framework.
 * 
 * <p>
 * Fields annotated with {@code @XReadonly} will be excluded from insert and
 * update operations.
 * They may still be included in query responses (i.e., readable but not
 * writable).
 * </p>
 * 
 * <p>
 * This is useful for fields like autogenerated values, computed fields, audit
 * timestamps, or
 * derived properties that should not be modified by clients.
 * </p>
 *
 * <h3>Typical Use Cases:</h3>
 * <ul>
 * <li>Database-generated fields like <code>createdAt</code> or
 * <code>id</code></li>
 * <li>Computed values like <code>totalAmount</code> or
 * <code>statusLabel</code></li>
 * <li>System-maintained fields that should not be exposed for updates</li>
 * </ul>
 *
 * @apiNote When this annotation is present, the field will be ignored in
 *          generated forms and DTOs
 *          for create and update operations. It will still be serialized in
 *          read responses unless explicitly excluded.
 * @author soumya
 * @since xresource-core 0.1
 */
@Retention(RUNTIME)
@Target(FIELD)
public @interface XReadonly {
}
